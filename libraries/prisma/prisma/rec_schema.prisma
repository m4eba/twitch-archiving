generator client {
  provider = "prisma-client-js"
  output   = "./generated/rec-client"
}

datasource db {
  provider = "postgresql"
  url      = env("REC_DATABASE_URL")
}

model ChatEmote {
  id     String
  source EmoteSource
  name   String
  ext    String
  data   Json

  @@id([id, source])
  @@index([name])
  @@map("chat_emote")
}

model ChatMessage {
  id       String   @id @db.Uuid
  channel  String
  username String
  message  String
  command  String
  time     DateTime @db.Timestamptz(6)
  data     Json
  emotes   Json

  @@index([channel])
  @@index([time])
  @@index([username])
  @@map("chat_message")
}

model ChatMessageEmote {
  messageId   String @map("message_id") @db.Uuid
  emoteId     String @map("emote_id") @db.Uuid
  emoteSource String @map("emote_source") @db.Uuid
  startIdx    Int    @map("start_idx")
  endIdx      Int    @map("end_idx")

  @@id([messageId, emoteId, emoteSource, startIdx])
  @@map("chat_message_emote")
}

model File {
  recordingId BigInt      @map("recording_id")
  name        String
  seq         Int
  timeOffset  Decimal     @map("time_offset") @db.Decimal
  duration    Decimal     @db.Decimal
  retries     Int         @db.SmallInt
  datetime    DateTime    @db.Timestamptz(6)
  size        Int
  downloaded  Int
  hash        String
  status      FileStatus?

  @@id([recordingId, name])
  @@index([name])
  @@index([recordingId], map: "file_recording_id")
  @@index([seq])
  @@index([status], map: "file_status")
  @@map("file")
}

model Recording {
  id      BigInt    @id @default(autoincrement())
  start   DateTime  @db.Timestamptz(6)
  stop    DateTime? @db.Timestamptz(6)
  channel String
  site_id String    @default("")
  data    Json?

  @@index([channel])
  @@index([site_id])
  @@index([start])
  @@index([stop])
  @@map("recording")
}

model Storyboard {
  id          BigInt   @id(map: "storyboard_pkey1") @default(autoincrement())
  name        String
  recordingId BigInt   @map("recording_id")
  interval    Int      @db.SmallInt
  rows        Int      @db.SmallInt
  columns     Int      @db.SmallInt
  width       Int
  height      Int
  data        Json
  modified    DateTime @db.Timestamptz(6)

  @@index([name], map: "storyboard_name_idx1")
  @@index([recordingId], map: "storyboard_recording_id_idx1")
  @@map("storyboard")
}

model Transcript {
  id              BigInt   @id @default(autoincrement())
  recordingId     BigInt   @map("recording_id")
  transcript      String
  totalStart      Int      @map("total_start")
  totalEnd        Int      @map("total_end")
  segmentSequence Int      @map("segment_sequence")
  audiostart      Int      @map("audio_start")
  audioEnd        Int      @map("audio_end")
  confidence      Float    @db.Real
  created         DateTime @db.Timestamptz(6)
  words           Json

  @@index([recordingId], map: "transcribe_recording_id_idx")
  @@index([totalEnd], map: "transcribe_total_end_idx")
  @@index([totalStart], map: "transcribe_total_start_idx")
  @@map("transcript")
}

model Clips {
  id               String   @id
  created_at       DateTime @db.Timestamptz(6)
  last_update      DateTime @db.Timestamptz(6)
  broadcaster_id   String
  broadcaster_name String
  creator_id       String
  creator_name     String
  title            String
  video_id         String
  video_offset     Int
  thumbnail_url    String
  view_count       Int
  duration         Decimal  @db.Decimal
  online           Boolean
  data             Json?

  @@index([broadcaster_id], map: "clips_broadcaster_id")
  @@index([created_at], map: "clips_created_at")
  @@index([creator_id], map: "clips_creator_id")
  @@index([online], map: "clips_online")
  @@index([title], map: "clips_title")
  @@index([video_id], map: "clips_video_id")
  @@map("clips")
}

model ClipsViews {
  id         String
  date       DateTime @db.Timestamptz(6)
  view_count Int

  @@id([id, view_count])
  @@index([date], map: "clips_views_date")
  @@map("clips_views")
}

model RetryLog {
  id    BigInt   @id @default(autoincrement())
  topic String
  time  DateTime @db.Timestamptz(6)
  data  Json

  @@index([time])
  @@index([topic])
  @@map("retry_log")
}

model Task {
  id           BigInt    @id @default(autoincrement())
  groupId      String    @map("group_id")
  task         String
  dependencies String[]
  started      DateTime? @db.Timestamptz(6)
  completed    DateTime? @db.Timestamptz(6)
  data         Json

  @@index([groupId])
  @@index([task])
  @@index([completed])
  @@index([started])
  @@map("task")
}

model StoryboardFile {
  id              BigInt    @id @default(autoincrement())
  storyboardId    BigInt    @map("storyboard_id")
  index           Int       @db.SmallInt
  firstSequence   Int       @map("first_sequence")
  firstScreenshot Int       @map("first_screenshot")
  length          Int
  timeOffset      Decimal   @map("time_offset") @db.Decimal
  slug            String
  data            Json
  created         DateTime? @db.Timestamptz(6)

  @@index([slug])
  @@index([storyboardId])
  @@index([timeOffset])
  @@map("storyboard_file")
}

model storyboard2 {
  id           BigInt @id(map: "storyboard_pkey") @default(autoincrement())
  name         String
  recording_id BigInt
  interval     Int    @db.SmallInt
  rows         Int    @db.SmallInt
  columns      Int    @db.SmallInt
  width        Int
  height       Int
  data         Json

  @@index([name], map: "storyboard_name_idx")
  @@index([recording_id], map: "storyboard_recording_id_idx")
}

enum EmoteSource {
  twitch
  bttv
  ffz
  tv     @map("7tv")

  @@map("emote_source")
}

enum FileStatus {
  downloading
  error
  done
  waiting

  @@map("file_status")
}
